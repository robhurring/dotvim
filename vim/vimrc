" vim: fdm=marker

let s:local_plugins = expand('~/.vim-plugins.local')
let s:local_rc = expand('~/.vimrc.local')

let g:mapleader="\<Space>"
let g:maplocalleader=','
inoremap jk <Esc>l

filetype plugin indent on
syntax on

" Plugins {{{
call plug#begin('~/.vim/plugged')

" dependencies
Plug 'tmhedberg/matchit'
Plug 'tpope/vim-dispatch'    " dep for: vim-test(O), vim-go(O)
let g:dispatch_no_maps = 1

" misc plugins
Plug 'nanotech/jellybeans.vim'
let g:jellybeans_use_term_italics = 1
let g:indent_guides_auto_colors = 1
let g:jellybeans_use_lowcolor_black = 1

Plug 'weirongxu/plantuml-previewer.vim'
Plug 'aklt/plantuml-syntax' " puml dep
Plug 'tyru/open-browser.vim' " plantuml dep

Plug 'junegunn/vim-easy-align'
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)

Plug 'editorconfig/editorconfig-vim'
let g:EditorConfig_exclude_patterns = ['fugitive://.*', 'scp://.*']

Plug 'vim-scripts/ReplaceWithRegister'
Plug 'Chiel92/vim-autoformat'
Plug 'skywind3000/asyncrun.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-endwise'
Plug 'tpope/vim-repeat'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-projectionist'
Plug 'benmills/vimux'                   " dep for: vim-test
" SEE: https://github.com/mhinz/dotfiles/blob/master/vim/vimrc#L349-L359
Plug 'jszakmeister/vim-togglecursor'    " only needed for vim/mvim
let g:togglecursor_force = 'xterm'

Plug 'AndrewRadev/splitjoin.vim'
Plug 'itchyny/lightline.vim'
" Plug 'Konfekt/FastFold'
" let g:fastfold_savehook = 0

" registers
Plug 'junegunn/vim-peekaboo'
let g:peekaboo_delay = 0
let g:peekaboo_compact = 1
let g:peekaboo_window = "bel bo 10new"

" finder
Plug 'liuchengxu/vista.vim'
let g:vista_close_on_jump = 1
let g:vista_fzf_preview = ['up:50%']
let g:vista_keep_fzf_colors = 1

" Plug 'antoinemadec/coc-fzf'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
let g:fzf_preview_window = ['right:60%', 'ctrl-/']
function! s:build_quickfix_list(lines)
  call setqflist(map(copy(a:lines), '{ "filename": v:val }'))
  copen
  cc
endfunction
let g:fzf_action = {
      \ 'ctrl-q': function('s:build_quickfix_list'),
      \ 'ctrl-t': 'tab split',
      \ 'ctrl-x': 'split',
      \ 'ctrl-v': 'vsplit' }

Plug 'mhinz/vim-grepper'
let g:grepper = {
      \'open': 1,
      \'jump': 0,
      \'tools': ['rg', 'ag', 'lag', 'git', 'grep', 'findstr'],
      \ 'lag': {
      \   'grepprg': 'rg --vimgrep $* $.',
      \   'grepformat': '%f:%l:%c:%m,%f:%l:%m',
      \   'escape': '\^$.*+?()[]%#'
      \ }
      \}

Plug 'scrooloose/nerdtree'
let g:NERDTreeIgnore=['\.pyc$', '\.pyo$', '\.py\$class$', '\.obj$', '\.o$', '\.so$', '^\.git$']
let g:NERDTreeQuitOnOpen = 1
let g:NERDTreeMinimalUI = 1

Plug 'jiangmiao/auto-pairs'
let g:AutoPairsMapSpace = 0
let g:AutoPairsMultilineClose = 0
let g:AutoPairsShortcutBackInsert = '<M-b>'
let g:AutoPairsShortcutFastWrap = '<M-e>'
let g:AutoPairsShortcutJump = '<M-n>'

" languages
Plug 'doums/darcula'
Plug 'sheerun/vim-polyglot'
let g:vim_markdown_conceal = 0
let g:vim_markdown_conceal_code_blocks = 0
let g:vim_markdown_auto_insert_bullets = 0
let g:vim_markdown_new_list_item_indent = 0
let g:jsx_ext_required = 0

" terraform
Plug 'hashivim/vim-terraform'

" markdown/etc
let g:vim_markdown_fenced_languages = ['javascript', 'ruby', 'sh', 'yaml', 'html', 'vim', 'json']
Plug 'davinche/godown-vim', {'for': 'markdown'}

" html/css/js
Plug 'tpope/vim-jdaddy', {'for': ['json', 'javascript']}
Plug 'tpope/vim-ragtag'
Plug 'mattn/emmet-vim'

" go
Plug 'fatih/vim-go', {'for': 'go'}
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1
let g:go_highlight_operators = 1
let g:go_highlight_build_constraints = 1
let g:go_dispatch_enabled = 1
let g:go_fmt_experimental = 0
let g:go_fmt_autosave = 1
let g:go_fmt_command = 'goimports'
let g:go_def_mapping_enabled = 0

" ruby vim-ruby from polyglot
Plug 'tpope/vim-bundler'  " used for appending gem tags to `tagfiles()`
Plug 'tpope/vim-cucumber'
Plug 'janko-m/vim-test'
let g:test#filename_modifier = ':p'
let g:test#strategy = 'vimux'
let g:test#ruby#rspec#executable = 'auto-bundle-exec rspec --require=~/.vim/config/rspec_vim_formatter.rb --format VimFormatter --out ~/.vim/tmp/quickfix.out --format progress'
let g:test#ruby#cucumber#executable = 'auto-bundle-exec cucumber --backtrace -r features'

" autocomplete (see autocomplete.vim for bindings)
" Plug 'neoclide/coc.nvim', {'branch': 'release'}
" let g:coc_global_extensions = ['coc-ultisnips', 'coc-json', 'coc-actions', 'coc-snippets']
" let g:coc_snippet_next = '<tab>'
" let g:coc_status_error_sign = 'E'
" let g:coc_status_warning_sign = 'W'

Plug 'SirVer/ultisnips'
let g:UltiSnipsSnippetDirectories = [$HOME.'/.vim/UltiSnips', $HOME.'/.vim/snippets']
let g:UltiSnipsExpandTrigger      = '<Tab>'
let g:UltiSnipsListSnippets       = '<C-l>'

" rust
Plug 'rust-lang/rust.vim', {'for': 'rust'}

" lsp
Plug 'neovim/nvim-lspconfig'
Plug 'williamboman/nvim-lsp-installer'
Plug 'hrsh7th/cmp-nvim-lsp'
Plug 'hrsh7th/cmp-buffer'
Plug 'hrsh7th/cmp-path'
Plug 'hrsh7th/cmp-cmdline'
Plug 'hrsh7th/nvim-cmp'
Plug 'quangnguyen30192/cmp-nvim-ultisnips'

" treesitter
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}


" local bundles
if filereadable(s:local_plugins)
  exec 'source ' . s:local_plugins
endif
call plug#end()
" }}} /plugins

" Lua Config {{{

lua << EOF
local nvim_lsp = require('lspconfig')

-- Use an on_attach function to only map the following keys
-- after the language server attaches to the current buffer
local on_attach = function(client, bufnr)
  local function buf_set_keymap(...) vim.api.nvim_buf_set_keymap(bufnr, ...) end
  local function buf_set_option(...) vim.api.nvim_buf_set_option(bufnr, ...) end

  -- Enable completion triggered by <c-x><c-o>
  buf_set_option('omnifunc', 'v:lua.vim.lsp.omnifunc')

  -- Mappings.
  local opts = { noremap=true, silent=true }

  -- See `:help vim.lsp.*` for documentation on any of the below functions
  buf_set_keymap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<CR>', opts)
  buf_set_keymap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<CR>', opts)
  buf_set_keymap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<CR>', opts)
  buf_set_keymap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<CR>', opts)
  buf_set_keymap('n', '<C-k>', '<cmd>lua vim.lsp.buf.signature_help()<CR>', opts)
  buf_set_keymap('n', '<space>wa', '<cmd>lua vim.lsp.buf.add_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wr', '<cmd>lua vim.lsp.buf.remove_workspace_folder()<CR>', opts)
  buf_set_keymap('n', '<space>wl', '<cmd>lua print(vim.inspect(vim.lsp.buf.list_workspace_folders()))<CR>', opts)
  buf_set_keymap('n', '<space>D', '<cmd>lua vim.lsp.buf.type_definition()<CR>', opts)
  buf_set_keymap('n', '<space>rn', '<cmd>lua vim.lsp.buf.rename()<CR>', opts)
  buf_set_keymap('n', '<space>ca', '<cmd>lua vim.lsp.buf.code_action()<CR>', opts)
  buf_set_keymap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<CR>', opts)
  buf_set_keymap('n', '<space>e', '<cmd>lua vim.diagnostic.open_float()<CR>', opts)
  buf_set_keymap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<CR>', opts)
  buf_set_keymap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<CR>', opts)
  buf_set_keymap('n', '<space>q', '<cmd>lua vim.diagnostic.setloclist()<CR>', opts)
  buf_set_keymap('n', '<space>f', '<cmd>lua vim.lsp.buf.formatting()<CR>', opts)
end

-- Use a loop to conveniently call 'setup' on multiple servers and
-- map buffer local keybindings when the language server attaches
local servers = { 'pyright', 'solargraph', 'tsserver' }
for _, lsp in ipairs(servers) do
  nvim_lsp[lsp].setup {
    on_attach = on_attach,
    flags = {
      debounce_text_changes = 150,
    }
  }
end

-- cmp
local cmp = require'cmp'
cmp.setup({
  snippet = {
    -- REQUIRED - you must specify a snippet engine
    expand = function(args)
      vim.fn["vsnip#anonymous"](args.body) -- For `vsnip` users.
      -- require('luasnip').lsp_expand(args.body) -- For `luasnip` users.
      -- require('snippy').expand_snippet(args.body) -- For `snippy` users.
      -- vim.fn["UltiSnips#Anon"](args.body) -- For `ultisnips` users.
    end,
  },

  mapping = {
    ['<C-b>'] = cmp.mapping(cmp.mapping.scroll_docs(-4), { 'i', 'c' }),
    ['<C-f>'] = cmp.mapping(cmp.mapping.scroll_docs(4), { 'i', 'c' }),
    ['<C-Space>'] = cmp.mapping(cmp.mapping.complete(), { 'i', 'c' }),
    ['<C-y>'] = cmp.config.disable, -- Specify `cmp.config.disable` if you want to remove the default `<C-y>` mapping.
    ['<C-e>'] = cmp.mapping({
      i = cmp.mapping.abort(),
      c = cmp.mapping.close(),
    }),
    ['<CR>'] = cmp.mapping.confirm({ select = true }), -- Accept currently selected item. Set `select` to `false` to only confirm explicitly selected items.
  },
  sources = cmp.config.sources({
    { name = 'nvim_lsp' },
    { name = 'ultisnips' }, -- For ultisnips users.
  }, {
    { name = 'buffer' },
  })
})

-- Use buffer source for `/` (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline('/', {
  sources = {
    { name = 'buffer' }
  }
})

-- Use cmdline & path source for ':' (if you enabled `native_menu`, this won't work anymore).
cmp.setup.cmdline(':', {
  sources = cmp.config.sources({
    { name = 'path' }
  }, {
    { name = 'cmdline' }
  })
})

-- Setup lspconfig.
local capabilities = require('cmp_nvim_lsp').update_capabilities(vim.lsp.protocol.make_client_capabilities())
-- Replace <YOUR_LSP_SERVER> with each lsp server you've enabled.
require('lspconfig')['solargraph'].setup {
  capabilities = capabilities
}

-- treesitter
require'nvim-treesitter.configs'.setup {
  -- One of "all", "maintained" (parsers with maintainers), or a list of languages
  ensure_installed = "maintained",

  -- Install languages synchronously (only applied to `ensure_installed`)
  sync_install = false,

  -- List of parsers to ignore installing
  ignore_install = { "javascript" },

  highlight = {
    -- `false` will disable the whole extension
    enable = true,

    -- list of language that will be disabled
    disable = { "c", "rust" },

    -- Setting this to true will run `:h syntax` and tree-sitter at the same time.
    -- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
    -- Using this option may slow down your editor, and you may see some duplicate highlights.
    -- Instead of true it can also be a list of languages
    additional_vim_regex_highlighting = false,
  },
}
EOF

" }}}

" Options {{{
" NOTE: some are unnecessary in neovim, but needed for vim compatibility
" http://vimdoc.sourceforge.net/htmldoc/quickref.html

set t_ut= " see: http://sunaku.github.io/vim-256color-bce.html

set autoindent
set autoread
set backspace=indent,eol,start
set backupdir=~/.vim/tmp
set breakat=\ ^I*-+;,/?\(\[\{ " fix syntax
set breakindent
set breakindentopt=shift:2
set clipboard=unnamed
set colorcolumn=101
set completeopt-=preview
set concealcursor=nc
set conceallevel=2
set cursorline
set diffopt=filler,iwhite,vertical
set directory=~/.vim/swap
set expandtab
set foldlevel=1
set foldmethod=syntax
set foldnestmax=10
set formatoptions+=j
"set guifont=Hasklig-Regular:h15
set guioptions-=r
set hidden
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set linebreak
set list
set listchars=tab:-\ ,nbsp:∙,extends:»,precedes:«
set mouse=a
set nofoldenable
set nowrap
set number
set scrolloff=3
set sessionoptions-=help
set shiftround
set shiftwidth=2
set shortmess+=A
set showbreak=↪\
set showmatch
set sidescroll=1
set sidescrolloff=3
set smartcase
set smartindent
set smarttab
set splitbelow
set splitright
set ttimeout
set ttimeoutlen=100
set tabstop=2
set tags+=./tags,./git/tags
set undodir=~/.vim/undo
" set updatetime=750
set updatetime=4000
set virtualedit=block
set wildignore+=*.pyc,*.class,*.cache,*.min.*
set wildignore+=*.tar.*
set wildignore+=*/.git/**/*,*/.hg/**/*,*/.svn/**/*
set wildignore+=*/min/*,*/vendor/*,*/node_modules/*,*/bower_components/*
set wildignore+=*/tmp/*,*/log/*,*.zip,*.so,*.swp,*.bak,*/undo/*,*/swap/*
set wildignore+=tags,cscope.*
set wildmenu

" neovim specific options
if has('nvim')
  set inccommand=split
end

" SEE: https://gist.github.com/XVilka/8346728
" NOTE: not working with vim/tmux currently
if has('termguicolors')
  set termguicolors
end

if has('gui_running')
  " set ballooneval
  " set macligatures
endif

" use zsh on where available
" NOTE: causes considerable lag
" if executable('zsh')
"   set shell=zsh
" endif
" set shellcmdflag=-lc

if executable('ag')
  set grepprg=ag\ -f\ --vimgrep\ $*
  set grepformat=%f:%l:%c:%m
endif

" SEE: https://github.com/BurntSushi/ripgrep
if executable('rg')
  set grepprg=rg\ -L\ --vimgrep\ $*
  set grepformat=%f:%l:%c:%m
endif

if has('nvim')
  let $NVIM_TUI_ENABLE_TRUE_COLOR=1
  let $NVIM_TUI_ENABLE_CURSOR_SHAPE=1
  set viminfo='100,/100,h,\"500,:100
else
  set viminfo='100,/100,h,\"500,:100,n~/.vim/viminfo
endif

" netrw tree view
let g:netrw_liststyle = 3

" }}}

" Theme"{{{
try
  execute 'set colorcolumn=' . join(range(101,200), ',')
  set background=dark
  let g:jellybeans_overrides = {
        \ 'ColorColumn': { 'guibg': '191919', 'ctermbg': 'none' },
        \ 'SignColumn': { 'guibg': '151515', 'ctermbg': 'none' },
        \ 'CursorLine': { 'guibg': '1c1c1c', 'ctermbg': 'none' }
        \ }

  colorscheme jellybeans
catch
  echom 'Missing color scheme!'
endtry

" syntax debugging
" map <F12> :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<'
"       \ . synIDattr(synID(line("."),col("."),0),"name") . "> lo<"
"       \ . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>

" Theme overrides
" http://www.colorpicker.com

" highlight trailing white space (via conceal)
highlight ExtraWhitespace   ctermfg=196 ctermbg=197 guibg=NONE guifg=#FF0080
highlight Conceal           ctermfg=196 ctermbg=197 guibg=NONE guifg=#FF0080

" floating windows
highlight NormalFloat ctermbg=190 guibg=#222222 guifg=#d6d6d6
" highlight link CocFloating NormalFloat
highlight link VistaFloat NormalFloat
"}}}

" Mappings {{{

" make Y behave like D
nnoremap Y y$

" shifting
nmap <TAB> >>
nmap <S-TAB> <<
vmap <TAB> >>
vmap <S-TAB> <<

" horizontal moves
nmap <Right> 10zl
nmap <Left> 10zh
nnoremap gL L
nnoremap gH H
nnoremap L zL
nnoremap H zH

" PUM navigation
inoremap <silent><expr> <C-j> pumvisible() ? "\<C-n>" : "\<C-j>"
inoremap <expr><C-k> pumvisible() ? "\<C-p>" : "\<C-k>"

" yank current file + line
nnoremap <silent> <F5> :let @*=expand("%").":".line(".")\|echom "Copied"<CR>

" don't move cursor for *
nnoremap * *``

" buffers / windows
nnoremap <silent> <C-x> :bunload<CR>
nnoremap <silent> <C-q> :bdelete<CR>
nnoremap <leader><leader> :Buffers<CR>
nnoremap <silent> <localleader><localleader> :b#<CR>

" fuzzy tags
nnoremap <C-t> :Vista finder fzf<CR>

" up/down on displayed lines, not real lines. (except when using counts)
noremap gk k
noremap gj j
noremap <expr> k (v:count > 1 ? "m'" . v:count . 'k': 'gk')
noremap <expr> j (v:count > 1 ? "m'" . v:count . 'j': 'gj')

" toggle folds
nnoremap <silent> \ @=(foldlevel('.')?'za':"\\")<CR>
vnoremap \ zf

" finder mappings
nnoremap <expr> <Plug>ProjectFiles (len(system('git rev-parse')) ? ':NERDTreeClose\|:Files' : ':NERDTreeClose\|:GFiles --exclude-standard --others --cached')."\<cr>"
nmap <C-Space> <Plug>ProjectFiles
nmap <C-@> <C-Space>

" FZF
nnoremap <silent> <Leader>s :Snippets<CR>
" nnoremap <silent> <Leader>f :Rg<CR>
" nnoremap <silent> <leader>s :BLines<CR>
" nnoremap <silent> <Leader>' :Marks<CR>
" nnoremap <silent> <Leader>H :Helptags<CR>
" nnoremap <silent> <Leader>hh :History<CR>
" nnoremap <silent> <Leader>h: :History:<CR>
" nnoremap <silent> <Leader>h/ :History/<CR>

" toggle quickfix/location
" SEE: plugins/toggle-quickfix.vim
nmap <silent> <leader>l <Plug>(toggle-only-location-list)
nmap <silent> <leader>c <Plug>(toggle-only-quickfix-list)
nmap <silent><nowait> <leader>q <Plug>(toggle-only-quickfix-list)

" cd to buffer's project root directory
" SEE: autoload/helpers.vim
nmap <silent> <localleader>cd :execute 'cd '.helpers#projectroot()<CR>

" saving (keep imap to avoid vim-surround from binding it)
inoremap <C-s> <Esc>:update<CR>
nnoremap <C-s> <Esc>:update<CR>
cmap w!! w !sudo tee > /dev/null %

" splits and such
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l
nnoremap <C-h> <C-w>h

" repeatng
vnoremap . :normal .<CR>
vnoremap @ :normal! @

" search/replace settings
nnoremap <silent> <leader>/ :noh<CR>

nnoremap <localleader>/ :%s/\<<c-r><c-w>\>//Ic<left><left><left>
vnoremap <localleader>/ "zy:%s/<C-r>z//gc<left><left><left>
vnoremap // "zy/<C-r>=escape(@z,'/\.*$^~[]()')<CR><CR>N
nnoremap // /<C-r>/

" search/replace similar to sublime (use `.` to quickly repeat, `n` to skip)
" Credit: http://www.kevinli.co/posts/2017-01-19-multiple-cursors-in-500-bytes-of-vimscript
let g:mc = "y/\\V\<C-r>=escape(@\", '/')\<CR>\<CR>"

nnoremap cn *``cgn
nnoremap cN *``cgN
vnoremap <expr> cn g:mc . "``cgn"
vnoremap <expr> cN g:mc . "``cgN"

" search/replace macros
function! SetupCR()
  nnoremap <Enter> :nnoremap <lt>Enter> n@z<CR>q:<C-u>let @z=strpart(@z,0,strlen(@z)-1)<CR>n@z
endfunction

nnoremap cq :call SetupCR()<CR>*``qz
nnoremap cQ :call SetupCR()<CR>#``qz
vnoremap <expr> cq ":\<C-u>call SetupCR()\<CR>" . "gv" . g:mc . "``qz"
vnoremap <expr> cQ ":\<C-u>call SetupCR()\<CR>" . "gv" . substitute(g:mc, '/', '?', 'g') . "``qz"

" searching
command! -nargs=* -complete=file Ag Grepper -tool ag -query <args>
" command! Todo Grepper -noprompt -tool git -grepprg git grep -nIi '\(TODO\|FIXME|HACK\):'
command! Todo Rg (TODO|FIXME|HACK)

if executable('rg')
  command! -nargs=* -complete=file Ag Grepper -tool rg -query <args>
endif

" operator pending: grep operators
nmap gs  <plug>(GrepperOperator)
xmap gs  <plug>(GrepperOperator)

" re-select pasted text
noremap gv `[v`]

" don't move cursor when joining
nnoremap J mzJ`z

" yanks
xnoremap <leader>p "0p
xnoremap <leader>P "0P
" nmap <Leader>y :Clap yanks<CR>

" vim-test
nnoremap <silent> <Leader>t :TestFile<CR>
nnoremap <silent> <Leader>T :TestNearest<CR>
nnoremap <silent> <Leader>tl :TestLast<CR>
nnoremap <silent> <Leader>ta :TestSuite<CR>

" load vim-test failures into quickfix
nnoremap <silent> <leader>sc :cg ~/.vim/tmp/quickfix.out\|copen<CR>

" splitjoin
nnoremap gS :SplitjoinSplit<cr>
nnoremap gJ :SplitjoinJoin<cr>

" vim-fugitive
nnoremap <localleader>ga :Git blame<CR>
nnoremap <localleader>gs :G<CR>

" vim-commentary <C-/>
map <C-_> gcc<Esc>

" vim-unimpaired / line bubbling
imap <C-Up> <Esc>[egi
imap <C-Down> <Esc>]egi
nmap <C-Up> [e
nmap <C-down> ]e
vmap <C-Up> [egv
vmap <C-Down> ]egv

" formatting / fix-whitespace
nmap <silent> <leader>= :Autoformat<CR>
" nmap <silent> <F1> :RemoveTrailingSpaces<CR>

" nerdtree
nnoremap <leader>e :NERDTreeToggle<cr>
nnoremap <leader>E :NERDTreeFind<cr>

" tagbar
nnoremap <localleader>t :Vista!!<cr>

" }}}1 /Mappings

" Augroups {{{

augroup VimrcGroup
  autocmd!

  " pickup where you left off
  autocmd BufReadPost * if &filetype !~ '^git\c' && line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

  " kick-off conceal extra whitespace
  autocmd BufRead,InsertLeave * syntax match ExtraWhitespace '\s\+$' containedin=ALL conceal cchar=∙
  autocmd BufReadPost * setlocal conceallevel=2 " some plugins are changing this so no visible whitespace

  " odd file extensions
  autocmd BufNewFile,BufRead {*.ejs}    set filetype=html
  autocmd BufNewFile,BufRead {*.js.erb} set filetype=javascript
  autocmd BufRead,BufNewFile {Procfile} set filetype=yaml

  " <C-X>= for #{}
  autocmd FileType yaml,eruby inoremap <buffer> <C-X>= <%=  %><Esc>hhi
  autocmd FileType ruby       inoremap <buffer> <C-X>= #{}<Esc>i
  autocmd FileType javascript inoremap <buffer> <C-X>= ${}<Esc>i
  autocmd FileType ruby,eruby setlocal iskeyword+=?,!

  " wrap markdown
  autocmd FileType markdown setlocal wrap

  " auto-reload vimrc
  autocmd BufWritePost {.vimrc,vimrc,.vimrc.local} nested source %

  " fix awful red colorcolumns in certain themes
  " autocmd ColorScheme * highlight ColorColumn guibg=#222222 ctermbg=235

  " auto-mark some common files
  autocmd BufLeave .vimrc,vimrc,init.vim normal mV
  autocmd BufLeave .zshrc normal mZ
  autocmd BufLeave .zshenv normal mE
  autocmd BufLeave .ideavimrc,ideavimrc normal mI
  autocmd BufLeave .gitconfig,git/config normal mG
  autocmd BufLeave .taskrc normal mT

  autocmd BufLeave .editorconfig EditorConfigReload

  autocmd FileType terraform setlocal commentstring=#\ %s
augroup END

" }}} /augroups

if filereadable(s:local_rc)
  exec 'source ' . s:local_rc
endif

