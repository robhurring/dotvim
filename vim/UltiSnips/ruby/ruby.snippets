snippet #!
#!/usr/bin/env ruby
# encoding: utf-8
endsnippet

snippet req "require"
require '${1}'
endsnippet

snippet reqr
require_relative '${1}'
endsnippet

snippet #
# =>
endsnippet

snippet cla "class .. initialize .. end"
class ${1:Klass}
	def initialize(${2:args})
		${0}
	end
end
endsnippet

snippet cla< "class .. < ParentClass .. initialize .. end"
class ${1:Klass} < ${2:ParentClass}
	def initialize(${3:args})
		${0}
	end
end
endsnippet

snippet claself "class << self .. end"
class << ${1:self}
	${0}
end
endsnippet

snippet mod "module .. ClassMethods .. end"
module ${1:Concern}
	def self.included(base)
		base.extend ClassMethods
	end

	module ClassMethods
		${0}
	end
end
endsnippet

snippet concern "ActiveSupport::Concern"
module ${1:Concern}
	extend ActiveSupport::Concern

	included do
		${1}
	end

	module ClassMethods
		${2}
	end
	${0}
end
endsnippet

snippet r
attr_reader :${0:attr_names}
endsnippet

snippet w
attr_writer :${0:attr_names}
endsnippet

snippet rw
attr_accessor :${0:attr_names}
endsnippet

snippet ivc "instance variable cache"
@_${1:variable_name} ||= ${0:${VISUAL:cached_value}}
endsnippet

snippet defs
def self.${1:class_method_name}
	${0}
end
endsnippet

snippet defmm
def method_missing(meth, *args, &blk)
	${0}
end
endsnippet

snippet am
alias_method :${1:new_name}, :${0:old_name}
endsnippet

snippet app
if __FILE__ == $PROGRAM_NAME
	${0}
end
endsnippet

snippet dir
Filename.dirname(__FILE__)
endsnippet

snippet ea
each { |${1:e}| ${0} }
endsnippet

snippet ead
each do |${1:e}|
	${0}
end
endsnippet

snippet eawo
each_with_object(${1:init}) { |${2:e}, ${3:var}| ${0} }
endsnippet

snippet eawod
each_with_object(${1:init}) do |${2:e}, ${3:var}|
	${0}
end
endsnippet

snippet red
reduce(${1:init}) { |${2:mem}, ${3:var}| ${0} }
endsnippet

snippet redd
reduce(${1:init}) do |${2:mem}, ${3:var}|
	${0}
end
endsnippet

snippet map
map { |${1:e}| ${0} }
endsnippet

snippet mapd
map do |${1:e}|
	${0}
end
endsnippet

snippet all
all? { |${1:e}| ${0} }
endsnippet

snippet any
any? { |${1:e}| ${0} }
endsnippet

snippet ->
-> { ${0} }
endsnippet

snippet ->a
->(${1:args}) { ${0} }
endsnippet

snippet :
${1:key}: ${2:'value'}
endsnippet

snippet optp
require 'optparse'

options = { ${0:default: 'args'} }

ARGV.options do |opts|
	opts.banner = "Usage: #{File.basename($PROGRAM_NAME)}"
end
endsnippet

snippet opt
opts.on('-${1:o}', '--${2:long-option-name}', ${3:String}, '${4:Option description.}') do |${5:opt}|
	${0}
end
endsnippet

snippet bm-
TESTS = ${1:10_000}
Benchmark.bmbm do |results|
	${0}
end
endsnippet

snippet rep
results.report('${1:name}:') { TESTS.times { ${0} } }
endsnippet

snippet sing
class << self; self end
endsnippet

snippet task
desc '${1:Task description}'
task ${2:task_name: [:dependent, :tasks]} do
	${0}
end
endsnippet

snippet b
{ |${1:var}| ${0} }
endsnippet

snippet debug
require 'byebug'; byebug
endsnippet

snippet debug19
require 'debugger'; debugger
endsnippet

snippet debug18
require 'ruby-debug'; debugger
endsnippet

snippet pry
require 'pry'; binding.pry
endsnippet
