snippet cdm "component did mount" b
componentDidMount() {
	${1}
},$0
endsnippet

snippet cdup "component did update" b
componentDidUpdate(prevProps, prevState) {
	${1}
},$0
endsnippet

snippet cwm "component will mount" b
componentWillMount() {
	${1}
},$0
endsnippet

snippet cwr "component will receive props" b
componentWillReceiveProps(nextProps) {
	${1}
},$0
endsnippet

snippet cwun "component will unmount" b
componentWillUnmount() {
	${1}
},$0
endsnippet

snippet cwu "component will update" b
componentWillUpdate(nextProps, nextState) {
	${1}
},$0
endsnippet

snippet cx
cx({
	${1}: ${2}
});
endsnippet

snippet fup
forceUpdate(${1:callback});
endsnippet

snippet gdp "get default props" b
getDefaultProps() {
	return {
		${1}
	};
},$0
endsnippet

snippet gis "get initial state" b
getInitialState() {
	return {
		${1}: ${2}
	};
},$0
endsnippet

snippet ism "is mounted"
isMounted()
endsnippet

snippet jsx "define jsx dom" b
/**
 * @jsx React.DOM
 */
endsnippet

snippet pt "propTypes" b
propTypes: {
	${1}: React.PropTypes.${2:string}
},
endsnippet

snippet rcc "create class/component" b
${1:import React from 'react';}

const ${2:Component} = React.createClass({
	render() {
		return (
			${VISUAL}$4
		);
	}
});
$0
${3:export default $2;}
endsnippet

snippet 6rcc "ES6 - create class/component" b
${1:import React from 'react';}

export default ${2:Component} extends React.Component {
	constructor(props) {
		super(props);
	}

	render() {
		return (
			${3:${VISUAL:<div>Hello World</div>}}$0
		);
	}
}
endsnippet

snippet ren
render() {
	return (
		${1:<div />}
	);
}$0
endsnippet

snippet sst "set state" b
this.setState({
	${1}: ${2}
});$0
endsnippet

snippet scu "should component update"
shouldComponentUpdate(nextProps, nextState) {
	${1}
},$0
endsnippet

snippet props "get property" i
this.props.${1}
endsnippet

snippet state "get state" i
this.state.${1}
endsnippet

snippet trp
this.transferPropsTo(${VISUAL}$0);
endsnippet
